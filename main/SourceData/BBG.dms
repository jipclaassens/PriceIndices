container BBG
{
	unit<UInt32> BBG_2020
	:	StorageName     = "%RSo_DataDir%/Grondgebruik/BBG/CBS_Publicatiebestand_NBBG2020_v2_vlp.gdb"
	,	StorageType     = "gdal.vect"
	,	StorageReadOnly = "True"
	,	Source          = "https://geoData.cbs.nl/files/Bodemgebruik/NBBG2020/ raadplegen op 13 noevmber 2024 "
						  //"conversie in ArcMap 10.8.1 mv copy features, Environment settings, Z Values Output has Z Values Disabled"
	,	Sqlstring       = "SELECT * FROM CBS_Publicatiebestand_NBBG2020_v2_vlp_undissolved"
	{
		attribute<rdc_meter> geometry (poly);
		attribute<rdc_meter> geometry_simpl (poly) := geos_buffer_multi_polygon(geometry, 1d, 16b);
		attribute<CBS2020Klasse> CBSKlasse_rel_2020 := CBS2020KlasseEK/CBSKlasseNr[value(NBBG20, CBS2020KlasseEK)];
	}
	
	container Dominant
	{
		
		
		attribute<CBS2020Klasse/gg_10k> BBG2020_5m_10k_src (rdc_5m) := CBS2020Klasse/gg_10k_rel[per_5m];
		attribute<CBS2020Klasse/gg_10k> BBG2020_5m_10k     (rdc_5m) := !IsDefined(BBG2020_5m_10k_src) ? CBS2020Klasse/gg_10k/v/osa_ : BBG2020_5m_10k_src;
		attribute<CBS2020Klasse/gg_12k> BBG2020_5m_12k_src (rdc_5m) := CBS2020Klasse/gg_12k_rel[per_5m];
		attribute<CBS2020Klasse/gg_12k> BBG2020_5m_12k     (rdc_5m) := !IsDefined(BBG2020_5m_12k_src) ? CBS2020Klasse/gg_12k/v/osa_ : BBG2020_5m_12k_src;

		attribute<BBG_2020>             CBS2020_5mtr       (rdc_5m) := poly2grid(BBG_2020/geometry, rdc_5m);
		attribute<BBG_2020>             CBS2020_10mtr     (rdc_10m) := poly2grid(BBG_2020/geometry, rdc_10m);
		attribute<Bool>                 BBG_groen_buff    (rdc_10m) := ='potential((CBS2020Klasse/IsGroen_breed[per_10m])[float32], Geography/Distmatrices/Impl_10m/pot100m/PotRange/binair)[bool]', Descr = "Buffer van 100m rond alle groenbestemmingen in de BBG, inclusief parken, begraafplaatsen, sportvelden en volkstuinen. Gebaseerd op de BBG 2020.";
		
		attribute<CBS2020Klasse> per_5m                         (rdc_5m) := BBG_2020/CBSKlasse_rel_2020[CBS2020_5mtr];
		attribute<CBS2020Klasse> per_10m                       (rdc_10m) := BBG_2020/CBSKlasse_rel_2020[CBS2020_10mtr];
		attribute<CBS2020Klasse> per_100m_Modus_UNCHECKED     (rdc_100m) : StorageName = "%RSo_DataDir%/Grondgebruik/BBG/BBG2020_100m_Modus.tif", StorageReadOnly = "TRUE", LazyCalculated = "TRUE";
		attribute<CBS2020Klasse> per_100m_Modus               (rdc_100m) := per_100m_Modus_UNCHECKED, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		attribute<CBS2020Klasse> per_25m_Modus_UNCHECKED       (rdc_25m) : StorageName = "%RSo_DataDir%/Grondgebruik/BBG/BBG2020_25m_Modus.tif", StorageReadOnly = "TRUE", LazyCalculated = "TRUE";
		attribute<CBS2020Klasse> per_25m_Modus                 (rdc_25m) := per_25m_Modus_UNCHECKED, IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";

		
		container Make25mgrids_Modus  := Modus25m_T(2020);
		container Make100mgrids_Modus := Modus100m_T(2020);

		Template Modus100m_T
		{
			//
			parameter<UInt32> Year;
			//
			
			attribute<CBS2020Klasse>   DominantCBSKlasse_100m  (rdc_100m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_100m_rel), 0[CBS2020Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_100m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
		
		Template Modus25m_T
		{
			//
			parameter<UInt32> Year;
			//
			
			attribute<CBS2020Klasse>   DominantCBSKlasse_25m  (rdc_25m)    := ='MakeDefined(Modus(Dominant/per_5m/Y'+string(Year)+',  rdc_5m/rdc_25m_rel), 0[CBS2020Klasse])'
			, StorageName = "='%RSo_DataDir%/Grondgebruik/BBG/BBG'+string(Year)+'_25m_Modus.tif'", IntegrityCheck = "not(all(IsNull(this))) && not(all(IsZero(this)))", StorageType = "gdalwrite.grid", Descr = "Check om ervoor te zorgen dat niet de hele kaart undefined of zero is. Is dit wel zo, ga dan terug tracen naar waar het probleem zit.";
		}
	}
}