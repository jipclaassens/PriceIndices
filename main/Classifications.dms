container Classifications : using = "Units"
{
	unit<uint8> vbo_status : nrofrows = 8
	{
		attribute<string>    label     : ['Niet gerealiseerd verblijfsobject','Verblijfsobject buiten gebruik','Verblijfsobject gevormd','Verblijfsobject in gebruik','Verblijfsobject in gebruik (niet ingemeten)','Verblijfsobject ingetrokken','Verblijfsobject ten onrechte opgevoerd', 'Verbouwing verblijfsobject'], DialogType = "LabelText";
		attribute<string>    name      := replace(label, ' ', '_', '-', '_', '(', '', ')', '');
		attribute<bool>      IsVoorraad : [FALSE, TRUE, FALSE, TRUE, TRUE, FALSE, FALSE, TRUE];
		attribute<bool>      IsIngetrokken : [FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE];
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<UInt8> pand_status : NrOfRows = 10
	{
		attribute<String>    Label      : ['Bouw gestart','Bouwvergunning verleend','Niet gerealiseerd pand','Pand buiten gebruik','Pand gesloopt','Pand in gebruik','Pand in gebruik (niet ingemeten)','Sloopvergunning verleend','Pand ten onrechte opgevoerd','Verbouwing pand'], DialogType = "LabelText";
		attribute<String>    name       := replace(Label, ' ', '_', '-', '_', '(', '', ')', '');
		attribute<Bool>      IsInPlanvorming : [FALSE,  TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<Bool>      IsInAanbouw     : [TRUE,   FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
		attribute<Bool>      IsInGebruik     : [FALSE,  FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<Bool>      IsVoorraad      : [FALSE,  FALSE, FALSE, TRUE,  FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE];
		attribute<Bool>      IsIngetrokken   : [FALSE,  FALSE, TRUE,  FALSE, TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
		attribute<Bool>      IsInSloop       : [FALSE,  FALSE, FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE,  TRUE,  FALSE];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
		
	unit<UInt8> vbo_gebruiksdoel: NrOfRows = 11
	{
		attribute<UInt8> id := id(.);
		attribute<String> Label:
		[
			'bijeenkomstfunctie',
			'celfunctie',
			'Gezondheidszorgfunctie',
			'industriefunctie',
			'Kantoorfunctie',
			'logiesfunctie',
			'onderwijsfunctie',
			'overige gebruiksfunctie',
			'sportfunctie',
			'winkelfunctie',
			'woonfunctie'
		];
		
		attribute<String> name := replace(replace(Label,' ','_'), 'functie','');
		attribute<Bool>   IsUtiliteit := lowercase(Label) != lowercase('woonfunctie');
		attribute<UInt16> functie_code : [1,2,4,8,16,32,64,128,256,512,1024];
		attribute<UInt32> BrushColor:  DialogType = "BrushColor",[rgb(255,255,255), rgb(  0,129,  0),rgb(  0,  0,255),rgb(255,220,  0),rgb(255,  0,  0)];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
		
		unit<UInt8> Utiliteiten := select_with_org_rel(IsUtiliteit)
		{
			attribute<String> Label        := ../Label[org_rel];
			attribute<String> name         := ../name[org_rel];
			attribute<UInt32> BrushColor   := ../BrushColor[org_rel], DialogType = "BrushColor";
		}
	}
	unit<UInt8> vbo_plus : NrOfRows = 2
	{
		attribute<String> Label : ['Logistiekfunctie','utiliteit combi-functie'];
		attribute<String> name  : ['Logistiek','utiliteit_combi'];
	}
	unit<UInt8> vbo_plus_plus : NrOfRows = 3
	{
		attribute<String> Label : ['Logistiekfunctie','utiliteit combi-functie','niet woon'];
		attribute<String> name  : ['Logistiek','utiliteit_combi', 'niet_woon'];
	}

	unit<UInt8> vbo_gebruiksdoel_plus := union_unit_uint8(vbo_gebruiksdoel, vbo_plus)
	{
		attribute<String> name      := union_data(., vbo_gebruiksdoel/name, vbo_plus/name);
		attribute<String> Label     := union_data(., vbo_gebruiksdoel/Label, vbo_plus/Label);
		
		attribute<Actor/Jobs6> Jobs6_rel := union_data(.
			,Actor/Jobs6/V/Ov_consumentendiensten // 'bijeenkomstfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'celfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'Gezondheidszorgfunctie',
			,Actor/Jobs6/V/Nijverheid             // 'industriefunctie',
			,Actor/Jobs6/V/Zak_dienstverlening    // 'Kantoorfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'logiesfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'onderwijsfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'overige gebruiksfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'sportfunctie',
			,Actor/Jobs6/V/Detailhandel           // 'winkelfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'woonfunctie'
			,Actor/Jobs6/V/Logistiek              // 'Logistiek
			,Actor/Jobs6/V/Nijverheid             // 'util combi
		);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<UInt8> vbo_gebruiksdoel_plus_plus := union_unit_uint8(vbo_gebruiksdoel, vbo_plus_plus)
	{
		attribute<String> name      := union_data(., vbo_gebruiksdoel/name, vbo_plus_plus/name);
		attribute<String> Label     := union_data(., vbo_gebruiksdoel/Label, vbo_plus_plus/Label);
		
		attribute<Actor/Jobs6> Jobs6_rel := union_data(.
			,Actor/Jobs6/V/Ov_consumentendiensten // 'bijeenkomstfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'celfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'Gezondheidszorgfunctie',
			,Actor/Jobs6/V/Nijverheid             // 'industriefunctie',
			,Actor/Jobs6/V/Zak_dienstverlening    // 'Kantoorfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'logiesfunctie',
			,Actor/Jobs6/V/Overheid_kw_diensten   // 'onderwijsfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'overige gebruiksfunctie',
			,Actor/Jobs6/V/Ov_consumentendiensten // 'sportfunctie',
			,Actor/Jobs6/V/Detailhandel           // 'winkelfunctie',
			,(0b/0b)[Actor/Jobs6]                 // 'woonfunctie'
			,Actor/Jobs6/V/Logistiek              // 'Logistiek
			,Actor/Jobs6/V/Nijverheid             // 'util combi
			,(0b/0b)[Actor/Jobs6]                 // 'niet_woon'
		);
		
		attribute<vbo_gebruiksdoel_plus> vbo_gebruiksdoel_plus_rel := rlookup(name, vbo_gebruiksdoel_plus/name);
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
		
	

	unit<uint32> jaren1222  := range(uint32, 2012, 2023)
	{
		attribute<uint32> values       := id(.);
		attribute<uint32> values_prev  := values == 2012 ? 2012 : values - 1;
		attribute<string> name         := replace(string(values), '201', 'Y201', '202', 'Y202');
		
		container V := for_each_nedv(name, String(ID(.))+'[..]', void, .);
	}
	
	unit<UInt8> WP5 : NrOfRows = 6
	{
		attribute<String> Label      : ['geen woonpand','vrijstaand','twee onder 1 kap','hoekwoning'  ,'tussenwoning','appartement'], DialogType = "LabelText";
		attribute<String> Label_engl : ['no_house'     ,'detached'  ,'semi-detached'   ,'end-terraced','terraced'    ,'apartment' ];
		attribute<String> name       := AsItemName(Label);
		attribute<.>      WP5_rel    := id(.);
		attribute<WP4>    WP4_rel    :  [null,0,1,2,2,3]; 
		attribute<WP3>    WP3_rel    :  [0,1,1,1,1,2];
		attribute<WP2>    WP2_rel    :  [null,0,0,0,0,1];
		
		attribute<UInt32> BrushColor :  [rgb(255,255,255)  , rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 180, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}

	unit<UInt8> WP4  : NrOfRows = 4
	{
		attribute<String> Label          : ['vrijstaand','twee onder 1 kap','rijtjeswoning','appartement'], DialogType = "LabelText";
		attribute<String> name_english   : ['detached'  ,'semidetached'   ,'terraced'     ,'apartment' ];
		attribute<String> name           := AsItemName(Label);
		attribute<String> Abbrev         : ['vrij', 'Tweeo1', 'rij', 'app'];
		attribute<UInt32> BrushColor     : [rgb(150, 0, 0) ,rgb(118, 159, 255),rgb(255, 220, 0),rgb(255, 100, 255)], DialogType = "BrushColor";
		attribute<WP2>    WP2_rel        := union_data(., WP2/V/eengezins, WP2/V/eengezins, WP2/V/eengezins, WP2/V/meergezins);
		attribute<Bool>   IsDetached     : [TRUE, FALSE, FALSE, FALSE];
		attribute<Bool>   IsSemiDetached : [FALSE, TRUE, FALSE, FALSE];
		
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> WP3: NrOfRows = 3
	{
		attribute<String> Label       : ['geen woonpand','eengezins','meergezins'], DialogType = "LabelText";
		attribute<String> name        := replace(Label, ' ', '_');
		attribute<WP2>    WP2_rel     := invert(WP2/WP3_rel);
		attribute<UInt32> BrushColor  : [rgb(255,255,255)  , rgb(150, 0, 0),rgb(253, 98, 94)], DialogType = "BrushColor";
		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	unit<UInt8> WP2 := select_with_org_rel(id(WP3) <> WP3/V/geen_woonpand)
	{
		attribute<WP3>                               WP3_rel                         := org_rel;
		attribute<String>                            name                            := WP3/name[WP3_rel];
		attribute<String>                            name_short                      := union_data(., 'EG', 'MG');
		attribute<String>                            Label                           := WP3/Label[WP3_rel], DialogType = "LabelText";
		attribute<UInt32>                            BrushColor                      := WP3/BrushColor[WP3_rel] , DialogType = "BrushColor";

		container V := for_each_nedv(name, string(id(.))+'[..]', void, .);
	}
	
	
	
	#include<CBSKlasse2020.dms>
	
	unit<uint8> HouseCharacteristics : nrofrows = 5
	{
		attribute<string> name :
		[
			'size',
			'lotsize',
			'nrooms',
			'd_maintgood',
			'd_highrise'
		];
		attribute<string> ValueType :
		[
			'uint16_t',
			'uint32_t',
			'uint8_t',
			'uint2_t',
			'uint2_t'
		];
	
		attribute<string> name2 := 'char_' + name;
		attribute<string> label := name;
	}
	
	
	unit<UInt32> WP4xHouseChar := combine(WP4, HouseCharacteristics)
	{
		attribute<String> name      :=  WP+'_'+HouseChar;
		attribute<String> WP        := rjoin(first_rel, id(WP4), WP4/name);
		attribute<String> HouseChar := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/name);
		attribute<String> ValueType := rjoin(second_rel, id(HouseCharacteristics), HouseCharacteristics/ValueType);
		
		unit<UInt2>  uint2_t     := Units/uint2_t;
		unit<UInt8>  uint8_t     := Units/uint8_t;
		unit<UInt16> UInt16_t    := Units/UInt16_t;
		unit<UInt32> uint32_t    := Units/uint32_t;
	}
}