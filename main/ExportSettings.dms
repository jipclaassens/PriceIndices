container ExportSettings
{
	container GitImpl
	{
		parameter<String> PD                := expand(., '%projDir%');
		parameter<String> DOS_PD            := replace(PD, '/', '\\');

		parameter<String> SwitchDriveCmd    := substr(DOS_PD, 0, 2);
		parameter<String> CdCmd             := 'cd '+DOS_PD;
		parameter<String> DescrCmd          := 'git describe --all > git.txt'; //hoofdletter gevoelig, alles moet lowercase zijn!
		parameter<String> StatusCmd         := 'git status >> git.txt';
		parameter<String> HashCmd           := 'git rev-parse HEAD >> git.txt';
		parameter<String> RevisionInfoCmds  := SwitchDriveCmd + ' && ' + CdCmd + ' && ' + DescrCmd + ' && ' + StatusCmd + ' && ' + HashCmd;
		parameter<UInt32> WriterCode        := exec_ec(Expand(., '%env:ComSpec%'), '/c ' + RevisionInfoCmds, PD);

		parameter<String> RevisionInfo_temp : StorageName = "%ProjDir%/git.txt", StorageType = "str";
		parameter<String> ErrorMsg          := 'Error '+string(GitImpl/WriterCode)+' while producing %ProjDir%/git.txt';
	}
	container MetaInfo
	{
		parameter<String> Filename : ='%storageBasename%.xml';
		parameter<String> FileType : ='xml'; // default is 'ini' but ini files cannot be used well to store multi-line properties such as error messages of inproperly configured properties
		
		container Contents
		{
			container Software
			{
				parameter<String> GeoDMSVersion := string(GeoDmsMajorVersionNumber()) + '.' +  string(GeoDmsMinorVersionNumber())  +'.'  +  string(GeoDmsPatchNumber());
			}
			
			container Config
			{
				parameter<String> FullName := '=PropValue(this, '+Quote('FullName')+')';
				parameter<String> Expr     := '=PropValue(this, '+Quote('Expr'    )+')';
				parameter<String> RunFile  := expand(.,'%configDir%')+'.dms';
			}
			
			container Environment
			{
				parameter<String> Processor    := expand(., '%env:PROCESSOR_idENTIFIER%');
				parameter<String> User         := expand(., '%env:USERNAME%');
				parameter<String> Computername := expand(., '%env:COMPUTERNAME%');
			}
			
			container Git
			{
				parameter<String> RevisionInfo  :=  = (GitImpl/WriterCode==0) ? 'GitImpl/RevisionInfo_temp' : 'GitImpl/ErrorMsg';
			}
			container Parameters
			{
				//datums/jaren
				// parameter<String> BAG_RecentYear                                := string(ModelParameters/BAG_RecentYear);
				// parameter<String> BAG_file_date                                 := string(ModelParameters/BAG_file_date);
				parameter<String> NVM_filedate                                  := string(ModelParameters/NVM_filedate);
			}
		}
	}
}